uint => entero sin signo

contrato:

    contract ZombieFactory {
        // params..
    }

estructuras:

    struct Zombie {
        string name;
        uint dna;
    }

funciones:

    publica: 
    function name (string param, uint param2) {
        // por default las funciones son publicas
    }

    privada:
    function _name(string params..) private {

    }

    con retorno:
    greeting = "Que onda amigo?"
    function sayHello() public view returns (string) {
        return greeting;
    }
    // se declara como funcion view porque
    // significa que solo puede ver los datos
    // y no modificarlos

    funciones pure: 
    // significa que ni siquiera
    // accedes a los datos de la applicacion
    function _multiply(uint a, uint b) private pure returns (uint) {
        return a * b;
    }

keccak256:
    // No es algo seguro.
    // Es una funcion hash, version de SHA3

    
eventos:
    /* Los eventos son la forma en la que nuestro
    contrato comunica que algo sucedio en la cadena
    de bloques a la interfaz de usuario.
    La UI podria estar escuchando el eventos /*

    //declaro el evento
    event IntegersAdded(uint x, uint y, uint result);

    function add(uint _x, uint _y) public {
        uint result = _x + _y;
        // lanza el evento para hacer saber a tu applicacion
        // que la funcion ha sido llamada
        emit IntegersAdded(_x, _y, result);
        return result;
    }

    // desde JS:
    Contract.IntegersAdded(function(error, result) {
        alert(result);
    });